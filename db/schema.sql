DROP SCHEMA IF EXISTS EXPENSE_TRACKER;
CREATE SCHEMA EXPENSE_TRACKER;

use EXPENSE_TRACKER;

CREATE TABLE USER (
  USER_ID INT PRIMARY KEY AUTO_INCREMENT,
  USER_FNAME VARCHAR(50) NOT NULL,
  USER_LNAME VARCHAR(50) NOT NULL,
  USER_EMAIL VARCHAR(100) NOT NULL UNIQUE,
  USER_PASSWORD VARCHAR(50) NOT NULL
);

CREATE TABLE CATEGORY (
  CATEGORY_ID INT PRIMARY KEY AUTO_INCREMENT,
  OWNER_ID INT NOT NULL,
  CATEGORY_TITLE VARCHAR(50) NOT NULL,
  CATEGORY_DESCRIPTION VARCHAR(255),

  FOREIGN KEY(OWNER_ID) REFERENCES USER(USER_ID),
  UNIQUE(OWNER_ID, CATEGORY_TITLE)
);

CREATE TABLE EVENT (
  EVENT_ID INT PRIMARY KEY AUTO_INCREMENT,
  OWNER_ID INT NOT NULL,
  EVENT_TITLE VARCHAR(50) NOT NULL UNIQUE,
  EVENT_DESCRIPTION VARCHAR(255),

  FOREIGN KEY(OWNER_ID) REFERENCES USER(USER_ID)
);

CREATE TABLE EVENT_MEMBERSHIP (
  EVENT_ID INT NOT NULL,
  MEMBER_ID INT NOT NULL,

  FOREIGN KEY(EVENT_ID) REFERENCES EVENT(EVENT_ID),
  FOREIGN KEY(MEMBER_ID) REFERENCES USER(USER_ID),
  UNIQUE(EVENT_ID, MEMBER_ID)
);

CREATE TABLE TRANSACTION (
  TRANSACTION_ID INT PRIMARY KEY AUTO_INCREMENT,
  CATEGORY_ID INT NOT NULL,
  TRANSACTION_TYPE VARCHAR(50) NOT NULL,
  TRANSACTION_DATE DATETIME NOT NULL,
  TRANSACTION_AMOUNT DECIMAL(10,2) DEFAULT 0.00,
  TRANSACTION_NOTES VARCHAR(255),

  FOREIGN KEY(CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID)
);

CREATE TABLE BUDGET (
  BUDGET_ID INT PRIMARY KEY AUTO_INCREMENT,
  CATEGORY_ID INT NOT NULL,
  BUDGET_DATE DATETIME NOT NULL,
  BUDGET_AMOUNT DECIMAL(10,2) DEFAULT 0.00,
  BUDGET_NOTES VARCHAR(255),

  FOREIGN KEY(CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID)
);

CREATE TABLE EVENT_TRANSACTION (
  EVENT_TRANSACTION_ID INT PRIMARY KEY AUTO_INCREMENT,
  EVENT_ID INT NOT NULL,
  TRANSACTION_ID INT NOT NULL,
  PAID_BY_USER_ID INT NOT NULL,
  PAID_TO_USER_ID INT NOT NULL,
  EVENT_TRANSACTION_DATE DATETIME NOT NULL,
  EVENT_TRANSACTION_AMOUNT DECIMAL(10,2) DEFAULT 0.00,
  EVENT_TRANSACTION_NOTES VARCHAR(255),

  FOREIGN KEY(EVENT_ID) REFERENCES EVENT(EVENT_ID),
  FOREIGN KEY(TRANSACTION_ID) REFERENCES TRANSACTION(TRANSACTION_ID),
  FOREIGN KEY(PAID_BY_USER_ID) REFERENCES USER(USER_ID),
  FOREIGN KEY(PAID_TO_USER_ID) REFERENCES USER(USER_ID)
);

